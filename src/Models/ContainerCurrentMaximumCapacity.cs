/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContainerCurrentMaximumCapacity : IEquatable<ContainerCurrentMaximumCapacity>
    { 
        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>

        [DataMember(Name="partyId")]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>

        [DataMember(Name="reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>

        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveTimePeriod
        /// </summary>

        [DataMember(Name="effectiveTimePeriod")]
        public ContainerCurrentMaximumCapacityEffectiveTimePeriod EffectiveTimePeriod { get; set; }

        /// <summary>
        /// Gets or Sets StatusIndicator
        /// </summary>

        [DataMember(Name="statusIndicator")]
        public string StatusIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDateTime
        /// </summary>

        [DataMember(Name="currentDateTime")]
        public DateTime? CurrentDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MaximumVolumeMeasure
        /// </summary>

        [DataMember(Name="maximumVolumeMeasure")]
        public ContainerCurrentMaximumCapacityMaximumVolumeMeasure MaximumVolumeMeasure { get; set; }

        /// <summary>
        /// Gets or Sets MaximumWeightMeasure
        /// </summary>

        [DataMember(Name="maximumWeightMeasure")]
        public ContainerCurrentMaximumCapacityMaximumWeightMeasure MaximumWeightMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerCurrentMaximumCapacity {\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  EffectiveTimePeriod: ").Append(EffectiveTimePeriod).Append("\n");
            sb.Append("  StatusIndicator: ").Append(StatusIndicator).Append("\n");
            sb.Append("  CurrentDateTime: ").Append(CurrentDateTime).Append("\n");
            sb.Append("  MaximumVolumeMeasure: ").Append(MaximumVolumeMeasure).Append("\n");
            sb.Append("  MaximumWeightMeasure: ").Append(MaximumWeightMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerCurrentMaximumCapacity)obj);
        }

        /// <summary>
        /// Returns true if ContainerCurrentMaximumCapacity instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerCurrentMaximumCapacity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerCurrentMaximumCapacity other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PartyId == other.PartyId ||
                    PartyId != null &&
                    PartyId.Equals(other.PartyId)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    EffectiveTimePeriod == other.EffectiveTimePeriod ||
                    EffectiveTimePeriod != null &&
                    EffectiveTimePeriod.Equals(other.EffectiveTimePeriod)
                ) && 
                (
                    StatusIndicator == other.StatusIndicator ||
                    StatusIndicator != null &&
                    StatusIndicator.Equals(other.StatusIndicator)
                ) && 
                (
                    CurrentDateTime == other.CurrentDateTime ||
                    CurrentDateTime != null &&
                    CurrentDateTime.Equals(other.CurrentDateTime)
                ) && 
                (
                    MaximumVolumeMeasure == other.MaximumVolumeMeasure ||
                    MaximumVolumeMeasure != null &&
                    MaximumVolumeMeasure.Equals(other.MaximumVolumeMeasure)
                ) && 
                (
                    MaximumWeightMeasure == other.MaximumWeightMeasure ||
                    MaximumWeightMeasure != null &&
                    MaximumWeightMeasure.Equals(other.MaximumWeightMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PartyId != null)
                    hashCode = hashCode * 59 + PartyId.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (EffectiveTimePeriod != null)
                    hashCode = hashCode * 59 + EffectiveTimePeriod.GetHashCode();
                    if (StatusIndicator != null)
                    hashCode = hashCode * 59 + StatusIndicator.GetHashCode();
                    if (CurrentDateTime != null)
                    hashCode = hashCode * 59 + CurrentDateTime.GetHashCode();
                    if (MaximumVolumeMeasure != null)
                    hashCode = hashCode * 59 + MaximumVolumeMeasure.GetHashCode();
                    if (MaximumWeightMeasure != null)
                    hashCode = hashCode * 59 + MaximumWeightMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerCurrentMaximumCapacity left, ContainerCurrentMaximumCapacity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerCurrentMaximumCapacity left, ContainerCurrentMaximumCapacity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
