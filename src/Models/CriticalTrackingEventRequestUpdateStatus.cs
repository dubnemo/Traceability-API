/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CriticalTrackingEventRequestUpdateStatus : IEquatable<CriticalTrackingEventRequestUpdateStatus>
    { 
        /// <summary>
        /// Gets or Sets Code
        /// </summary>

        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveTimePeriod
        /// </summary>

        [DataMember(Name="effectiveTimePeriod")]
        public CriticalTrackingEventRequestUpdateTimePeriod EffectiveTimePeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CriticalTrackingEventRequestUpdateStatus {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EffectiveTimePeriod: ").Append(EffectiveTimePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CriticalTrackingEventRequestUpdateStatus)obj);
        }

        /// <summary>
        /// Returns true if CriticalTrackingEventRequestUpdateStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of CriticalTrackingEventRequestUpdateStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CriticalTrackingEventRequestUpdateStatus other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    EffectiveTimePeriod == other.EffectiveTimePeriod ||
                    EffectiveTimePeriod != null &&
                    EffectiveTimePeriod.Equals(other.EffectiveTimePeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (EffectiveTimePeriod != null)
                    hashCode = hashCode * 59 + EffectiveTimePeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CriticalTrackingEventRequestUpdateStatus left, CriticalTrackingEventRequestUpdateStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CriticalTrackingEventRequestUpdateStatus left, CriticalTrackingEventRequestUpdateStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
