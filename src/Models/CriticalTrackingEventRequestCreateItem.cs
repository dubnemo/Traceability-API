/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CriticalTrackingEventRequestCreateItem : IEquatable<CriticalTrackingEventRequestCreateItem>
    { 
        /// <summary>
        /// Gets or Sets ManufacturerItemIdentification
        /// </summary>

        [DataMember(Name="manufacturerItemIdentification")]
        public CriticalTrackingEventRequestCreateItemManufacturerItemIdentification ManufacturerItemIdentification { get; set; }

        /// <summary>
        /// Gets or Sets Gtinid
        /// </summary>

        [DataMember(Name="gtinid")]
        public string Gtinid { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>

        [DataMember(Name="brandName")]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets VarietyName
        /// </summary>

        [DataMember(Name="varietyName")]
        public string VarietyName { get; set; }

        /// <summary>
        /// Gets or Sets ItemTreatment
        /// </summary>

        [DataMember(Name="itemTreatment")]
        public List<CriticalTrackingEventRequestCreateItemItemTreatment> ItemTreatment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CriticalTrackingEventRequestCreateItem {\n");
            sb.Append("  ManufacturerItemIdentification: ").Append(ManufacturerItemIdentification).Append("\n");
            sb.Append("  Gtinid: ").Append(Gtinid).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  VarietyName: ").Append(VarietyName).Append("\n");
            sb.Append("  ItemTreatment: ").Append(ItemTreatment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CriticalTrackingEventRequestCreateItem)obj);
        }

        /// <summary>
        /// Returns true if CriticalTrackingEventRequestCreateItem instances are equal
        /// </summary>
        /// <param name="other">Instance of CriticalTrackingEventRequestCreateItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CriticalTrackingEventRequestCreateItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ManufacturerItemIdentification == other.ManufacturerItemIdentification ||
                    ManufacturerItemIdentification != null &&
                    ManufacturerItemIdentification.Equals(other.ManufacturerItemIdentification)
                ) && 
                (
                    Gtinid == other.Gtinid ||
                    Gtinid != null &&
                    Gtinid.Equals(other.Gtinid)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    VarietyName == other.VarietyName ||
                    VarietyName != null &&
                    VarietyName.Equals(other.VarietyName)
                ) && 
                (
                    ItemTreatment == other.ItemTreatment ||
                    ItemTreatment != null &&
                    ItemTreatment.SequenceEqual(other.ItemTreatment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ManufacturerItemIdentification != null)
                    hashCode = hashCode * 59 + ManufacturerItemIdentification.GetHashCode();
                    if (Gtinid != null)
                    hashCode = hashCode * 59 + Gtinid.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (VarietyName != null)
                    hashCode = hashCode * 59 + VarietyName.GetHashCode();
                    if (ItemTreatment != null)
                    hashCode = hashCode * 59 + ItemTreatment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CriticalTrackingEventRequestCreateItem left, CriticalTrackingEventRequestCreateItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CriticalTrackingEventRequestCreateItem left, CriticalTrackingEventRequestCreateItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
