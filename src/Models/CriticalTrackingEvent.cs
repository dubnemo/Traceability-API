/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CriticalTrackingEvent : IEquatable<CriticalTrackingEvent>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>

        [DataMember(Name="uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>

        [DataMember(Name="sourceId")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>

        [DataMember(Name="partyId")]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets CriticalTrackingEventType
        /// </summary>

        [DataMember(Name="criticalTrackingEventType")]
        public string CriticalTrackingEventType { get; set; }

        /// <summary>
        /// Gets or Sets ProcessCategory
        /// </summary>

        [DataMember(Name="processCategory")]
        public CriticalTrackingEventListEntryProcessCategory ProcessCategory { get; set; }

        /// <summary>
        /// Gets or Sets TimePeriod
        /// </summary>

        [DataMember(Name="timePeriod")]
        public ContainerCurrentMaximumCapacityEffectiveTimePeriod TimePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Geospatial
        /// </summary>

        [DataMember(Name="geospatial")]
        public CriticalTrackingEventRequestCreateGeospatial Geospatial { get; set; }

        /// <summary>
        /// Gets or Sets TraceableResourceUnit
        /// </summary>

        [DataMember(Name="traceableResourceUnit")]
        public List<CriticalTrackingEventRequestCreateTraceableResourceUnit> TraceableResourceUnit { get; set; }

        /// <summary>
        /// Gets or Sets KeyDataElement
        /// </summary>

        [DataMember(Name="keyDataElement")]
        public List<CriticalTrackingEventListEntryKeyDataElement> KeyDataElement { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>

        [DataMember(Name="operation")]
        public CriticalTrackingEventListEntryOperation Operation { get; set; }

        /// <summary>
        /// Gets or Sets OperatorParty
        /// </summary>

        [DataMember(Name="operatorParty")]
        public List<CriticalTrackingEventRequestCreateOperatorParty> OperatorParty { get; set; }

        /// <summary>
        /// Gets or Sets PublisherParty
        /// </summary>

        [DataMember(Name="publisherParty")]
        public List<CriticalTrackingEventRequestCreateOperatorParty> PublisherParty { get; set; }

        /// <summary>
        /// Gets or Sets RelatedDatasetMetadataReference
        /// </summary>

        [DataMember(Name="relatedDatasetMetadataReference")]
        public List<CriticalTrackingEventListEntryRelatedDatasetMetadataReference> RelatedDatasetMetadataReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CriticalTrackingEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  CriticalTrackingEventType: ").Append(CriticalTrackingEventType).Append("\n");
            sb.Append("  ProcessCategory: ").Append(ProcessCategory).Append("\n");
            sb.Append("  TimePeriod: ").Append(TimePeriod).Append("\n");
            sb.Append("  Geospatial: ").Append(Geospatial).Append("\n");
            sb.Append("  TraceableResourceUnit: ").Append(TraceableResourceUnit).Append("\n");
            sb.Append("  KeyDataElement: ").Append(KeyDataElement).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  OperatorParty: ").Append(OperatorParty).Append("\n");
            sb.Append("  PublisherParty: ").Append(PublisherParty).Append("\n");
            sb.Append("  RelatedDatasetMetadataReference: ").Append(RelatedDatasetMetadataReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CriticalTrackingEvent)obj);
        }

        /// <summary>
        /// Returns true if CriticalTrackingEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of CriticalTrackingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CriticalTrackingEvent other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    PartyId == other.PartyId ||
                    PartyId != null &&
                    PartyId.Equals(other.PartyId)
                ) && 
                (
                    CriticalTrackingEventType == other.CriticalTrackingEventType ||
                    CriticalTrackingEventType != null &&
                    CriticalTrackingEventType.Equals(other.CriticalTrackingEventType)
                ) && 
                (
                    ProcessCategory == other.ProcessCategory ||
                    ProcessCategory != null &&
                    ProcessCategory.Equals(other.ProcessCategory)
                ) && 
                (
                    TimePeriod == other.TimePeriod ||
                    TimePeriod != null &&
                    TimePeriod.Equals(other.TimePeriod)
                ) && 
                (
                    Geospatial == other.Geospatial ||
                    Geospatial != null &&
                    Geospatial.Equals(other.Geospatial)
                ) && 
                (
                    TraceableResourceUnit == other.TraceableResourceUnit ||
                    TraceableResourceUnit != null &&
                    TraceableResourceUnit.SequenceEqual(other.TraceableResourceUnit)
                ) && 
                (
                    KeyDataElement == other.KeyDataElement ||
                    KeyDataElement != null &&
                    KeyDataElement.SequenceEqual(other.KeyDataElement)
                ) && 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.Equals(other.Operation)
                ) && 
                (
                    OperatorParty == other.OperatorParty ||
                    OperatorParty != null &&
                    OperatorParty.SequenceEqual(other.OperatorParty)
                ) && 
                (
                    PublisherParty == other.PublisherParty ||
                    PublisherParty != null &&
                    PublisherParty.SequenceEqual(other.PublisherParty)
                ) && 
                (
                    RelatedDatasetMetadataReference == other.RelatedDatasetMetadataReference ||
                    RelatedDatasetMetadataReference != null &&
                    RelatedDatasetMetadataReference.SequenceEqual(other.RelatedDatasetMetadataReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (PartyId != null)
                    hashCode = hashCode * 59 + PartyId.GetHashCode();
                    if (CriticalTrackingEventType != null)
                    hashCode = hashCode * 59 + CriticalTrackingEventType.GetHashCode();
                    if (ProcessCategory != null)
                    hashCode = hashCode * 59 + ProcessCategory.GetHashCode();
                    if (TimePeriod != null)
                    hashCode = hashCode * 59 + TimePeriod.GetHashCode();
                    if (Geospatial != null)
                    hashCode = hashCode * 59 + Geospatial.GetHashCode();
                    if (TraceableResourceUnit != null)
                    hashCode = hashCode * 59 + TraceableResourceUnit.GetHashCode();
                    if (KeyDataElement != null)
                    hashCode = hashCode * 59 + KeyDataElement.GetHashCode();
                    if (Operation != null)
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                    if (OperatorParty != null)
                    hashCode = hashCode * 59 + OperatorParty.GetHashCode();
                    if (PublisherParty != null)
                    hashCode = hashCode * 59 + PublisherParty.GetHashCode();
                    if (RelatedDatasetMetadataReference != null)
                    hashCode = hashCode * 59 + RelatedDatasetMetadataReference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CriticalTrackingEvent left, CriticalTrackingEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CriticalTrackingEvent left, CriticalTrackingEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
