/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Geospatial : IEquatable<Geospatial>
    { 
        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>

        [DataMember(Name="typeCode")]
        public string TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>

        [DataMember(Name="uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>

        [DataMember(Name="sourceId")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>

        [DataMember(Name="partyId")]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedId
        /// </summary>

        [DataMember(Name="relatedId")]
        public List<GeospatialRelatedId> RelatedId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FormatCode
        /// </summary>

        [DataMember(Name="formatCode")]
        public string FormatCode { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>

        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>

        [DataMember(Name="uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets GeographicalRegionCode
        /// </summary>

        [DataMember(Name="geographicalRegionCode")]
        public CriticalTrackingEventRequestCreateGeospatialGeographicalRegionCode GeographicalRegionCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Geospatial {\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  RelatedId: ").Append(RelatedId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FormatCode: ").Append(FormatCode).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  GeographicalRegionCode: ").Append(GeographicalRegionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Geospatial)obj);
        }

        /// <summary>
        /// Returns true if Geospatial instances are equal
        /// </summary>
        /// <param name="other">Instance of Geospatial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Geospatial other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TypeCode == other.TypeCode ||
                    TypeCode != null &&
                    TypeCode.Equals(other.TypeCode)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    PartyId == other.PartyId ||
                    PartyId != null &&
                    PartyId.Equals(other.PartyId)
                ) && 
                (
                    RelatedId == other.RelatedId ||
                    RelatedId != null &&
                    RelatedId.SequenceEqual(other.RelatedId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FormatCode == other.FormatCode ||
                    FormatCode != null &&
                    FormatCode.Equals(other.FormatCode)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Uri == other.Uri ||
                    Uri != null &&
                    Uri.Equals(other.Uri)
                ) && 
                (
                    GeographicalRegionCode == other.GeographicalRegionCode ||
                    GeographicalRegionCode != null &&
                    GeographicalRegionCode.Equals(other.GeographicalRegionCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TypeCode != null)
                    hashCode = hashCode * 59 + TypeCode.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (PartyId != null)
                    hashCode = hashCode * 59 + PartyId.GetHashCode();
                    if (RelatedId != null)
                    hashCode = hashCode * 59 + RelatedId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (FormatCode != null)
                    hashCode = hashCode * 59 + FormatCode.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Uri != null)
                    hashCode = hashCode * 59 + Uri.GetHashCode();
                    if (GeographicalRegionCode != null)
                    hashCode = hashCode * 59 + GeographicalRegionCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Geospatial left, Geospatial right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Geospatial left, Geospatial right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
