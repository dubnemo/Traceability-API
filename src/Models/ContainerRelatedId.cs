/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContainerRelatedId : IEquatable<ContainerRelatedId>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public OneOfcontainerRelatedIdId Id { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>

        [DataMember(Name="uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>

        [DataMember(Name="sourceId")]
        public OneOfcontainerRelatedIdSourceId SourceId { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>

        [DataMember(Name="partyId")]
        public string PartyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerRelatedId {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerRelatedId)obj);
        }

        /// <summary>
        /// Returns true if ContainerRelatedId instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerRelatedId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerRelatedId other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    PartyId == other.PartyId ||
                    PartyId != null &&
                    PartyId.Equals(other.PartyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (PartyId != null)
                    hashCode = hashCode * 59 + PartyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerRelatedId left, ContainerRelatedId right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerRelatedId left, ContainerRelatedId right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
