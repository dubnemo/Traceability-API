/*
 * Traceability API
 *
 * Provides the ability to create Critical Tracking Events (CTEs), Traceable Resource Units (TRUs) and relate container and their state to TRUs
 *
 * OpenAPI spec version: V1
 * Contact: wg20@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContainerState : IEquatable<ContainerState>
    { 
        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public ContainerStateStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets AvailableVolumeMeasure
        /// </summary>

        [DataMember(Name="availableVolumeMeasure")]
        public ContainerStateAvailableVolumeMeasure AvailableVolumeMeasure { get; set; }

        /// <summary>
        /// Gets or Sets AvailableWeightMeasure
        /// </summary>

        [DataMember(Name="availableWeightMeasure")]
        public ContainerStateAvailableWeightMeasure AvailableWeightMeasure { get; set; }

        /// <summary>
        /// Gets or Sets EndMaterialVolumeMeasure
        /// </summary>

        [DataMember(Name="endMaterialVolumeMeasure")]
        public ContainerStateEndMaterialVolumeMeasure EndMaterialVolumeMeasure { get; set; }

        /// <summary>
        /// Gets or Sets EndMaterialWeightMeasure
        /// </summary>

        [DataMember(Name="endMaterialWeightMeasure")]
        public ContainerStateEndMaterialWeightMeasure EndMaterialWeightMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerState {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AvailableVolumeMeasure: ").Append(AvailableVolumeMeasure).Append("\n");
            sb.Append("  AvailableWeightMeasure: ").Append(AvailableWeightMeasure).Append("\n");
            sb.Append("  EndMaterialVolumeMeasure: ").Append(EndMaterialVolumeMeasure).Append("\n");
            sb.Append("  EndMaterialWeightMeasure: ").Append(EndMaterialWeightMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerState)obj);
        }

        /// <summary>
        /// Returns true if ContainerState instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerState other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    AvailableVolumeMeasure == other.AvailableVolumeMeasure ||
                    AvailableVolumeMeasure != null &&
                    AvailableVolumeMeasure.Equals(other.AvailableVolumeMeasure)
                ) && 
                (
                    AvailableWeightMeasure == other.AvailableWeightMeasure ||
                    AvailableWeightMeasure != null &&
                    AvailableWeightMeasure.Equals(other.AvailableWeightMeasure)
                ) && 
                (
                    EndMaterialVolumeMeasure == other.EndMaterialVolumeMeasure ||
                    EndMaterialVolumeMeasure != null &&
                    EndMaterialVolumeMeasure.Equals(other.EndMaterialVolumeMeasure)
                ) && 
                (
                    EndMaterialWeightMeasure == other.EndMaterialWeightMeasure ||
                    EndMaterialWeightMeasure != null &&
                    EndMaterialWeightMeasure.Equals(other.EndMaterialWeightMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AvailableVolumeMeasure != null)
                    hashCode = hashCode * 59 + AvailableVolumeMeasure.GetHashCode();
                    if (AvailableWeightMeasure != null)
                    hashCode = hashCode * 59 + AvailableWeightMeasure.GetHashCode();
                    if (EndMaterialVolumeMeasure != null)
                    hashCode = hashCode * 59 + EndMaterialVolumeMeasure.GetHashCode();
                    if (EndMaterialWeightMeasure != null)
                    hashCode = hashCode * 59 + EndMaterialWeightMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerState left, ContainerState right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerState left, ContainerState right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
